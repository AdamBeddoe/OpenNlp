using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenNLP.Tools.Util.Trees.TRegex
{
    /**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
    public abstract class TregexParserConstants
    {
        /** End of File. */
        int EOF = 0;
        /** RegularExpression Id. */
        int RELATION = 4;
        /** RegularExpression Id. */
        int MULTI_RELATION = 5;
        /** RegularExpression Id. */
        int REL_W_STR_ARG = 6;
        /** RegularExpression Id. */
        int NUMBER = 7;
        /** RegularExpression Id. */
        int IDENTIFIER = 8;
        /** RegularExpression Id. */
        int BLANK = 9;
        /** RegularExpression Id. */
        int REGEX = 10;
        /** RegularExpression Id. */
        int VARNAME = 11;

        /** Lexical state. */
        int DEFAULT = 0;

        /** Literal token values. */
        String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "<RELATION>",
    "\"<...\"",
    "<REL_W_STR_ARG>",
    "<NUMBER>",
    "<IDENTIFIER>",
    "\"__\"",
    "<REGEX>",
    "<VARNAME>",
    "\"|\"",
    "\"\\n\"",
    "\"(\"",
    "\")\"",
    "\"!\"",
    "\"@\"",
    "\"#\"",
    "\"%\"",
    "\"=\"",
    "\"~\"",
    "\"&\"",
    "\"?\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\";\"",
    "\"}\"",
  };
    }
}
