using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace OpenNLP.Tools.Util.Trees.TRegex
{
    /**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */

    public abstract class TregexParserConstants
    {
        /** End of File. */
        public const int EOF = 0;
        /** RegularExpression Id. */
        public const int RELATION = 4;
        /** RegularExpression Id. */
        public const int MULTI_RELATION = 5;
        /** RegularExpression Id. */
        public const int REL_W_STR_ARG = 6;
        /** RegularExpression Id. */
        public const int NUMBER = 7;
        /** RegularExpression Id. */
        public const int IDENTIFIER = 8;
        /** RegularExpression Id. */
        public const int BLANK = 9;
        /** RegularExpression Id. */
        public const int REGEX = 10;
        /** RegularExpression Id. */
        public const int VARNAME = 11;

        /** Lexical state. */
        public const int DEFAULT = 0;

        /** Literal token values. */

        protected String[] tokenImage =
        {
            "<EOF>",
            "\" \"",
            "\"\\r\"",
            "\"\\t\"",
            "<RELATION>",
            "\"<...\"",
            "<REL_W_STR_ARG>",
            "<NUMBER>",
            "<IDENTIFIER>",
            "\"__\"",
            "<REGEX>",
            "<VARNAME>",
            "\"|\"",
            "\"\\n\"",
            "\"(\"",
            "\")\"",
            "\"!\"",
            "\"@\"",
            "\"#\"",
            "\"%\"",
            "\"=\"",
            "\"~\"",
            "\"&\"",
            "\"?\"",
            "\"[\"",
            "\"]\"",
            "\"{\"",
            "\";\"",
            "\"}\"",
        };
    }
}